plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
}

repositories {
    mavenCentral()
}

def aspectjWeaverVersion = "1.9.22",
    selenideVersion =  "6.19.1",
    javaClient = "8.3.0",
    allureVersion = "2.24.0",
    junitVersion = "5.9.3",
    slf4jVersion = "2.0.7"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {  // отвечает за появление папки build/allure-results
        aspectjWeaver.set(true) // отвечает за аннотацию @Step
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion) // версия интеграции фреймворка junit5 и allure
            }
        }
    }
}

dependencies {
    testImplementation(
            "org.aspectj:aspectjweaver:$aspectjWeaverVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.appium:java-client:$javaClient",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "io.qameta.allure:allure-junit5:2.27.0"
    )
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
}

test {
    useJUnitPlatform()
    systemProperty 'allure.results.directory', "$buildDir/allure-results"
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
    systemProperty "native.encoding", "UTF-8"
    systemProperty "console.encoding", "UTF-8"
}

tasks.withType(Test) {
    doFirst {
        println "Current file.encoding: " + System.getProperty("file.encoding")
        println "Current native.encoding: " + System.getProperty("native.encoding")
        println ">>> JVM file.encoding: " + System.getProperty("file.encoding")
    }
}

